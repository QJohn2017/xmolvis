// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "../include/fl_xmol_view.h"
//#define __FL_MOL_VIEW__

void help_xmol::cb_Close_i(Fl_Button*, void*) {
  //
  help_win->hide();
}
void help_xmol::cb_Close(Fl_Button* o, void* v) {
  ((help_xmol*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

help_xmol::help_xmol() {
  { Fl_Double_Window* o = help_win = new Fl_Double_Window(455, 160, "About XMolView");
    help_win->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(10, 30, 330, 101, "xmolvis is open source and released under GNU General Public License (GPLv3) \
or later. For support contact:\nsupport@@xmol.org and bugs@@xmol.org\nwww.xmol\
.org\nCopyright 2002-2015 by Edmanuel Torres");
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)55);
      o->align(Fl_Align(160|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(84, 134, 223, 22, "Get FLTK from www.fltk.org.");
      o->align(Fl_Align(133|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(360, 117, 70, 28, "&Close");
      o->box(FL_GLEAM_UP_BOX);
      o->color((Fl_Color)41);
      o->selection_color((Fl_Color)41);
      o->labelcolor((Fl_Color)57);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { new Fl_Box(340, 10, 99, 100);
    } // Fl_Box* o
    { version = new Fl_Box(45, 5, 265, 25, "xmolvis (alpha)");
      version->labelfont(1);
    } // Fl_Box* version
    o->resizable(NULL);
    help_win->set_modal();
    help_win->end();
  } // Fl_Double_Window* help_win
}

void help_xmol::show() {
  //
    //create_mol->position(5,102);
    static char buff[64];
    sprintf(buff,"XMolVis %s%s(%s) Build %s",AutoVersion::STATUS,AutoVersion::UBUNTU_VERSION_STYLE,AutoVersion::DATE,AutoVersion::FULLVERSION_STRING);
    version->label((const char*) buff);
    help_win->show();
}

void message_xmol::cb_Close1_i(Fl_Button*, void*) {
  //
  message_win->hide();
}
void message_xmol::cb_Close1(Fl_Button* o, void* v) {
  ((message_xmol*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

message_xmol::message_xmol() {
  { Fl_Double_Window* o = message_win = new Fl_Double_Window(375, 90, "XMolView Warning Message");
    message_win->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(10, 6, 355, 54, "Wrong file format: Consider check the file, extension or the input format!");
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)55);
      o->labelfont(1);
      o->align(Fl_Align(160|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(160, 63, 70, 19, "&Close");
      o->box(FL_GLEAM_UP_BOX);
      o->color((Fl_Color)41);
      o->selection_color((Fl_Color)41);
      o->labelcolor((Fl_Color)57);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    o->resizable(NULL);
    message_win->set_modal();
    message_win->end();
  } // Fl_Double_Window* message_win
}

void message_xmol::show() {
  //
    //create_mol->position(5,102);
    message_win->show();
}

void fl_xmol_view::cb_mol3d_i(Fl_Gl_Mol_View*, void*) {
  //
  //uint a=mol3d->get_action();
  //std::cout<<" Action: "<<a<<std::endl;
  
  //
  //position_panel->deactivate();
}
void fl_xmol_view::cb_mol3d(Fl_Gl_Mol_View* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->user_data()))->cb_mol3d_i(o,v);
}

void fl_xmol_view::cb_Open_i(Fl_Menu_*, void*) {
  //
  open_file();
}
void fl_xmol_view::cb_Open(Fl_Menu_* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->user_data()))->cb_Open_i(o,v);
}

void fl_xmol_view::cb_Load_i(Fl_Menu_*, void*) {
  //
  load_file();
}
void fl_xmol_view::cb_Load(Fl_Menu_* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

void fl_xmol_view::cb_Close2_i(Fl_Menu_*, void*) {
  main_window->hide();
exit(0);
}
void fl_xmol_view::cb_Close2(Fl_Menu_* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->user_data()))->cb_Close2_i(o,v);
}

void fl_xmol_view::cb_About_i(Fl_Menu_*, void*) {
  //
  help_xmol * about = new help_xmol();
  about->show();
}
void fl_xmol_view::cb_About(Fl_Menu_* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item fl_xmol_view::menu_main_menu[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Open", 0,  (Fl_Callback*)fl_xmol_view::cb_Open, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Load file", 0,  (Fl_Callback*)fl_xmol_view::cb_Load, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Reload", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Save", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Save as...", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Close", 0,  (Fl_Callback*)fl_xmol_view::cb_Close2, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"About", 0,  (Fl_Callback*)fl_xmol_view::cb_About, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void fl_xmol_view::cb_vernum_i(Fl_Button*, void*) {
  //
  help_xmol * about = new help_xmol();
  about->show();
}
void fl_xmol_view::cb_vernum(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_vernum_i(o,v);
}

void fl_xmol_view::cb_file_open_button_i(Fl_Button*, void*) {
  //
  open_file();
}
void fl_xmol_view::cb_file_open_button(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_file_open_button_i(o,v);
}

void fl_xmol_view::cb_load_file_button_i(Fl_Button*, void*) {
  //
  load_file();
  //work_control->activate();
}
void fl_xmol_view::cb_load_file_button(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_load_file_button_i(o,v);
}

void fl_xmol_view::cb_save_as_file_button_i(Fl_Button*, void*) {
  //
  save_as_file();
}
void fl_xmol_view::cb_save_as_file_button(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_save_as_file_button_i(o,v);
}

void fl_xmol_view::cb_reload_file_button_i(Fl_Button*, void*) {
  // Save a copy of the POSCAR file
// void apiSavePoscar(string fname){
//   apiReload();
//   vredraw();
}
void fl_xmol_view::cb_reload_file_button(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reload_file_button_i(o,v);
}

void fl_xmol_view::cb_save_file_button_i(Fl_Button*, void*) {
  // Save the file
  
  //save_input_file();
}
void fl_xmol_view::cb_save_file_button(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_save_file_button_i(o,v);
}

void fl_xmol_view::cb_input_file_type_i(Fl_Choice*, void*) {
  //
  ffmt = (uint)input_file_type->value();
  //std::cout<<" unknow input: "<<INPUT_FILE_TYPE_UNKNOWN<<std::endl;
  if(ffmt != 6){
    load_file_button->activate();  
    input_file_type->value(ffmt);
    output_file_type->value(ffmt);
    //std::cout<<" input: "<<ffmt<<std::endl;
    if(ffmt==1){ // XYZ only
      input_file_units->activate();
    }else{
      input_file_units->deactivate();
    }
  }else{
    load_file_button->deactivate();
    ffmt = INPUT_FILE_TYPE_UNKNOWN;
    input_file_units->deactivate();
  };
}
void fl_xmol_view::cb_input_file_type(Fl_Choice* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_file_type_i(o,v);
}

void fl_xmol_view::cb_input_file_units_i(Fl_Choice*, void*) {
  //;
}
void fl_xmol_view::cb_input_file_units(Fl_Choice* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_input_file_units_i(o,v);
}

void fl_xmol_view::cb_output_file_type_i(Fl_Choice*, void*) {
  //
  if((unsigned int)output_file_type->value() == OUTPUT_FILE_TYPE_XYZ){
    output_file_atoms->activate();
    output_file_frags->activate();
  }else if((unsigned int)output_file_type->value() == OUTPUT_FILE_TYPE_GAU){
    output_file_atoms->activate();
    output_file_frags->activate();
  }else if((unsigned int)output_file_type->value() == OUTPUT_FILE_TYPE_PDB){
    output_file_atoms->activate();
    output_file_frags->activate();
  }else if((unsigned int)output_file_type->value() == OUTPUT_FILE_TYPE_DLP){
    output_file_atoms->activate();
  }else{
    output_file_atoms->deactivate();
    output_file_frags->deactivate();
  };
}
void fl_xmol_view::cb_output_file_type(Fl_Choice* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_output_file_type_i(o,v);
}

void fl_xmol_view::cb_output_file_atoms_i(Fl_Check_Button*, void*) {
  //;
}
void fl_xmol_view::cb_output_file_atoms(Fl_Check_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_output_file_atoms_i(o,v);
}

void fl_xmol_view::cb_output_file_frags_i(Fl_Check_Button*, void*) {
  //;
}
void fl_xmol_view::cb_output_file_frags(Fl_Check_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_output_file_frags_i(o,v);
}

void fl_xmol_view::cb_output_topology_i(Fl_Check_Button*, void*) {
  //;
}
void fl_xmol_view::cb_output_topology(Fl_Check_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_output_topology_i(o,v);
}

void fl_xmol_view::cb_sphere_resolution_i(Fl_Choice*, void*) {
  //
  mol3d->set_sphere_resolution((int)sphere_resolution->value());
  view_redraw();
}
void fl_xmol_view::cb_sphere_resolution(Fl_Choice* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sphere_resolution_i(o,v);
}

void fl_xmol_view::cb_xcells_i(Fl_Value_Input*, void*) {
  //;
}
void fl_xmol_view::cb_xcells(Fl_Value_Input* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_xcells_i(o,v);
}

void fl_xmol_view::cb__i(Fl_Button*, void*) {
  //
  int val = (int)xcells->value();
  xcells->value(val-1);
  mol3d->set_x_cells((int)xcells->value());
  view_redraw();
}
void fl_xmol_view::cb_(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void fl_xmol_view::cb_1_i(Fl_Button*, void*) {
  //
  int val = (int)xcells->value();
  xcells->value(val+1);
  mol3d->set_x_cells((int)xcells->value());
  view_redraw();
}
void fl_xmol_view::cb_1(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void fl_xmol_view::cb_ycells_i(Fl_Value_Input*, void*) {
  //;
}
void fl_xmol_view::cb_ycells(Fl_Value_Input* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ycells_i(o,v);
}

void fl_xmol_view::cb_2_i(Fl_Button*, void*) {
  //
  int val = (int)ycells->value();
  ycells->value(val-1);
  mol3d->set_y_cells((int)ycells->value());
  view_redraw();
}
void fl_xmol_view::cb_2(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void fl_xmol_view::cb_3_i(Fl_Button*, void*) {
  //
  int val = (int)ycells->value();
  ycells->value(val+1);
  mol3d->set_y_cells((int)ycells->value());
  view_redraw();
}
void fl_xmol_view::cb_3(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void fl_xmol_view::cb_zcells_i(Fl_Value_Input*, void*) {
  //;
}
void fl_xmol_view::cb_zcells(Fl_Value_Input* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_zcells_i(o,v);
}

void fl_xmol_view::cb_4_i(Fl_Button*, void*) {
  //
  int val = (int)zcells->value();
  zcells->value(val-1);
  mol3d->set_z_cells((int)zcells->value());
  view_redraw();
}
void fl_xmol_view::cb_4(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void fl_xmol_view::cb_5_i(Fl_Button*, void*) {
  //
  int val = (int)zcells->value();
  zcells->value(val+1);
  mol3d->set_z_cells((int)zcells->value());
  view_redraw();
}
void fl_xmol_view::cb_5(Fl_Button* o, void* v) {
  ((fl_xmol_view*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

fl_xmol_view::fl_xmol_view() {
  //
    int ans=0;
    char chpt[1024];
    
    p_user=getenv("USER");
  #ifdef __FL_MOL_VIEW__
    printf("%s\n",p_user);
  #endif
    sprintf(str_cmd,"/home/%s/.xmolvis/string.def",p_user);
  #ifdef __FL_MOL_VIEW__
    printf("%s\n",str_cmd);
  #endif
    std::ifstream infile(str_cmd);
    
    if(infile.is_open()){
      infile.getline(chpt,1024); 
      strcpy(dir_name,chpt);
      infile.close();
    }else{
      sprintf(str_cmd,"mkdir -p /home/%s/.xmolvis/",p_user);
  #if defined (BUILD_FOR_LINUX) || defined (BUILD_FOR_MACOS)
      ans = system(str_cmd);
  #endif
      sprintf(str_cmd,"/home/%s",p_user);
      strcpy(dir_name,str_cmd);
    }
    
    update_coordinates=false;
  { main_window = new Fl_Double_Window(945, 675, "Molecular eXplorer Visualizer (XMolVis)");
    main_window->color(FL_INACTIVE_COLOR);
    main_window->selection_color(FL_INACTIVE_COLOR);
    main_window->labelsize(12);
    main_window->labelcolor(FL_BACKGROUND2_COLOR);
    main_window->user_data((void*)(this));
    main_window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(-5, -1, 955, 678);
      o->box(FL_FLAT_BOX);
      o->color(FL_INACTIVE_COLOR);
      o->selection_color(FL_INACTIVE_COLOR);
      o->labelsize(12);
      { mol3d = new Fl_Gl_Mol_View(205, 1, 742, 674, "There is not OpenGL available... :P");
        mol3d->box(FL_BORDER_BOX);
        mol3d->color(FL_FOREGROUND_COLOR);
        mol3d->selection_color(FL_FOREGROUND_COLOR);
        mol3d->labeltype(FL_NORMAL_LABEL);
        mol3d->labelfont(0);
        mol3d->labelsize(12);
        mol3d->labelcolor(FL_SELECTION_COLOR);
        mol3d->callback((Fl_Callback*)cb_mol3d);
        mol3d->align(Fl_Align(FL_ALIGN_CENTER));
        mol3d->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(mol3d);
      } // Fl_Gl_Mol_View* mol3d
      { control_panel = new Fl_Group(0, -1, 205, 675);
        control_panel->box(FL_FLAT_BOX);
        control_panel->color(FL_DARK3);
        control_panel->selection_color(FL_DARK3);
        control_panel->labelsize(12);
        { main_menu = new Fl_Menu_Bar(0, -1, 205, 20);
          main_menu->box(FL_FLAT_BOX);
          main_menu->color((Fl_Color)34);
          main_menu->selection_color(FL_BACKGROUND2_COLOR);
          main_menu->labelfont(1);
          main_menu->labelsize(12);
          main_menu->labelcolor((Fl_Color)34);
          main_menu->textfont(1);
          main_menu->textcolor(FL_BACKGROUND2_COLOR);
          main_menu->menu(menu_main_menu);
        } // Fl_Menu_Bar* main_menu
        { file_tools = new Fl_Group(2, 24, 203, 33);
          file_tools->box(FL_FLAT_BOX);
          file_tools->color(FL_INACTIVE_COLOR);
          file_tools->selection_color(FL_BACKGROUND2_COLOR);
          file_tools->labelsize(12);
          file_tools->labelcolor(FL_BACKGROUND2_COLOR);
          { vernum = new Fl_Button(120, 28, 70, 25, "xmvis");
            vernum->box(FL_NO_BOX);
            vernum->color((Fl_Color)16);
            vernum->selection_color((Fl_Color)16);
            vernum->labelfont(1);
            vernum->callback((Fl_Callback*)cb_vernum);
          } // Fl_Button* vernum
          { file_open_button = new Fl_Button(5, 27, 35, 25, "@fileopen");
            file_open_button->box(FL_GLEAM_UP_BOX);
            file_open_button->color((Fl_Color)25);
            file_open_button->selection_color((Fl_Color)25);
            file_open_button->labelsize(10);
            file_open_button->labelcolor((Fl_Color)27);
            file_open_button->callback((Fl_Callback*)cb_file_open_button);
          } // Fl_Button* file_open_button
          { load_file_button = new Fl_Button(40, 27, 36, 25, "@->");
            load_file_button->box(FL_GLEAM_UP_BOX);
            load_file_button->color((Fl_Color)25);
            load_file_button->selection_color((Fl_Color)25);
            load_file_button->labelsize(10);
            load_file_button->labelcolor((Fl_Color)27);
            load_file_button->callback((Fl_Callback*)cb_load_file_button);
            load_file_button->deactivate();
          } // Fl_Button* load_file_button
          { save_as_file_button = new Fl_Button(76, 27, 35, 25, "@filesaveas");
            save_as_file_button->box(FL_GLEAM_UP_BOX);
            save_as_file_button->color((Fl_Color)25);
            save_as_file_button->selection_color((Fl_Color)25);
            save_as_file_button->labelsize(10);
            save_as_file_button->labelcolor((Fl_Color)27);
            save_as_file_button->callback((Fl_Callback*)cb_save_as_file_button);
            save_as_file_button->deactivate();
          } // Fl_Button* save_as_file_button
          { reload_file_button = new Fl_Button(92, 29, 35, 25, "@reload");
            reload_file_button->box(FL_GLEAM_UP_BOX);
            reload_file_button->color((Fl_Color)25);
            reload_file_button->selection_color((Fl_Color)25);
            reload_file_button->labelsize(10);
            reload_file_button->labelcolor((Fl_Color)27);
            reload_file_button->callback((Fl_Callback*)cb_reload_file_button);
            reload_file_button->hide();
            reload_file_button->deactivate();
          } // Fl_Button* reload_file_button
          { save_file_button = new Fl_Button(128, 29, 35, 25, "@filesave");
            save_file_button->box(FL_GLEAM_UP_BOX);
            save_file_button->color((Fl_Color)25);
            save_file_button->selection_color((Fl_Color)25);
            save_file_button->labelsize(10);
            save_file_button->labelcolor((Fl_Color)27);
            save_file_button->callback((Fl_Callback*)cb_save_file_button);
            save_file_button->hide();
            save_file_button->deactivate();
          } // Fl_Button* save_file_button
          { Fl_Choice* o = output_program = new Fl_Choice(203, 56, 0, 1);
            output_program->box(FL_GTK_THIN_UP_BOX);
            output_program->down_box(FL_BORDER_BOX);
            output_program->color((Fl_Color)22);
            output_program->selection_color((Fl_Color)22);
            output_program->labelsize(10);
            output_program->textsize(10);
            output_program->hide();
            output_program->deactivate();
            o->add("standard|fragments|topmol|full");
            o->value(0);
          } // Fl_Choice* output_program
          file_tools->end();
        } // Fl_Group* file_tools
        { Fl_Box* o = new Fl_Box(0, 673, 205, 1);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Group* o = new Fl_Group(10, 70, 186, 65, "Input file format");
          o->box(FL_FLAT_BOX);
          o->color(FL_INACTIVE_COLOR);
          o->selection_color((Fl_Color)38);
          o->labelsize(10);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Choice* o = input_file_type = new Fl_Choice(56, 79, 108, 16, "Input:");
            input_file_type->box(FL_GTK_THIN_UP_BOX);
            input_file_type->down_box(FL_BORDER_BOX);
            input_file_type->color((Fl_Color)22);
            input_file_type->selection_color((Fl_Color)22);
            input_file_type->labelsize(12);
            input_file_type->labelcolor(FL_BACKGROUND2_COLOR);
            input_file_type->textsize(10);
            input_file_type->callback((Fl_Callback*)cb_input_file_type);
            o->add("POSCAR|XYZ|Gaussian|PDB|DL_POLY|Z-Matrix|UNKNOWN");
            o->value(6);
          } // Fl_Choice* input_file_type
          { Fl_Choice* o = input_file_units = new Fl_Choice(56, 99, 108, 16, "Units:");
            input_file_units->box(FL_GTK_THIN_UP_BOX);
            input_file_units->down_box(FL_BORDER_BOX);
            input_file_units->color((Fl_Color)22);
            input_file_units->selection_color((Fl_Color)22);
            input_file_units->labelsize(12);
            input_file_units->labelcolor(FL_BACKGROUND2_COLOR);
            input_file_units->textsize(10);
            input_file_units->callback((Fl_Callback*)cb_input_file_units);
            o->add("Angstrom|Bohr");
            o->value(0);
          } // Fl_Choice* input_file_units
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 147, 186, 101, "Output file format");
          o->box(FL_FLAT_BOX);
          o->color(FL_INACTIVE_COLOR);
          o->selection_color((Fl_Color)38);
          o->labelsize(10);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Choice* o = output_file_type = new Fl_Choice(56, 159, 108, 16, "Output:");
            output_file_type->box(FL_GTK_THIN_UP_BOX);
            output_file_type->down_box(FL_BORDER_BOX);
            output_file_type->color((Fl_Color)22);
            output_file_type->selection_color((Fl_Color)22);
            output_file_type->labelsize(12);
            output_file_type->labelcolor(FL_BACKGROUND2_COLOR);
            output_file_type->textsize(10);
            output_file_type->callback((Fl_Callback*)cb_output_file_type);
            o->add("POSCAR|XYZ|Gaussian|PDB|DL_POLY|Z-Matrix|UNKNOWN");
            o->value(6);
          } // Fl_Choice* output_file_type
          { output_file_atoms = new Fl_Check_Button(57, 185, 60, 20, "structure");
            output_file_atoms->down_box(FL_DOWN_BOX);
            output_file_atoms->labelsize(12);
            output_file_atoms->labelcolor(FL_BACKGROUND2_COLOR);
            output_file_atoms->callback((Fl_Callback*)cb_output_file_atoms);
          } // Fl_Check_Button* output_file_atoms
          { output_file_frags = new Fl_Check_Button(57, 225, 63, 20, "fragments");
            output_file_frags->down_box(FL_DOWN_BOX);
            output_file_frags->labelsize(12);
            output_file_frags->labelcolor(FL_BACKGROUND2_COLOR);
            output_file_frags->callback((Fl_Callback*)cb_output_file_frags);
            output_file_frags->deactivate();
          } // Fl_Check_Button* output_file_frags
          { output_topology = new Fl_Check_Button(57, 205, 63, 20, "topology");
            output_topology->down_box(FL_DOWN_BOX);
            output_topology->labelsize(12);
            output_topology->labelcolor(FL_BACKGROUND2_COLOR);
            output_topology->callback((Fl_Callback*)cb_output_topology);
          } // Fl_Check_Button* output_topology
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 262, 186, 113, "View");
          o->box(FL_FLAT_BOX);
          o->color(FL_INACTIVE_COLOR);
          o->selection_color((Fl_Color)38);
          o->labelsize(10);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Choice* o = sphere_resolution = new Fl_Choice(56, 269, 108, 18, "sphere");
            sphere_resolution->down_box(FL_BORDER_BOX);
            sphere_resolution->selection_color(FL_BACKGROUND_COLOR);
            sphere_resolution->labelsize(12);
            sphere_resolution->labelcolor(FL_BACKGROUND2_COLOR);
            sphere_resolution->textsize(12);
            sphere_resolution->callback((Fl_Callback*)cb_sphere_resolution);
            o->add("0 preview|1 fast|2 normal|3 medium|4 high");
            o->value(2);
          } // Fl_Choice* sphere_resolution
          { Fl_Group* o = new Fl_Group(19, 310, 101, 65, "periodic images");
            o->box(FL_FLAT_BOX);
            o->color(FL_INACTIVE_COLOR);
            o->selection_color((Fl_Color)38);
            o->labelsize(12);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            { xcells = new Fl_Value_Input(36, 317, 40, 15, "x");
              xcells->box(FL_THIN_DOWN_BOX);
              xcells->color((Fl_Color)1);
              xcells->selection_color((Fl_Color)1);
              xcells->labelsize(12);
              xcells->labelcolor(FL_BACKGROUND2_COLOR);
              xcells->maximum(1000);
              xcells->step(1);
              xcells->textsize(12);
              xcells->callback((Fl_Callback*)cb_xcells);
            } // Fl_Value_Input* xcells
            { Fl_Button* o = new Fl_Button(79, 317, 20, 15, "@<-");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(100, 317, 20, 15, "@->");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_1);
            } // Fl_Button* o
            { ycells = new Fl_Value_Input(36, 335, 40, 15, "y");
              ycells->box(FL_THIN_DOWN_BOX);
              ycells->color((Fl_Color)111);
              ycells->selection_color((Fl_Color)111);
              ycells->labelsize(12);
              ycells->labelcolor(FL_BACKGROUND2_COLOR);
              ycells->maximum(1000);
              ycells->step(1);
              ycells->textsize(12);
              ycells->callback((Fl_Callback*)cb_ycells);
            } // Fl_Value_Input* ycells
            { Fl_Button* o = new Fl_Button(79, 335, 20, 15, "@<-");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_2);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(100, 335, 20, 15, "@->");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_3);
            } // Fl_Button* o
            { zcells = new Fl_Value_Input(36, 354, 40, 13, "z");
              zcells->box(FL_THIN_DOWN_BOX);
              zcells->color(FL_CYAN);
              zcells->selection_color(FL_CYAN);
              zcells->labelsize(12);
              zcells->labelcolor(FL_BACKGROUND2_COLOR);
              zcells->maximum(1000);
              zcells->step(1);
              zcells->textsize(12);
              zcells->callback((Fl_Callback*)cb_zcells);
            } // Fl_Value_Input* zcells
            { Fl_Button* o = new Fl_Button(79, 354, 20, 13, "@<-");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_4);
            } // Fl_Button* o
            { Fl_Button* o = new Fl_Button(100, 354, 20, 13, "@->");
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)27);
              o->selection_color((Fl_Color)27);
              o->labelsize(12);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_5);
            } // Fl_Button* o
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        control_panel->resizable(0);
        control_panel->end();
      } // Fl_Group* control_panel
      o->end();
    } // Fl_Group* o
    main_window->end();
    main_window->resizable(main_window);
  } // Fl_Double_Window* main_window
  //
}

void fl_xmol_view::open_directory(const char *d) {
  //
    strcpy(dir_name,d);
    Fl_File_Chooser * p;
    p = new Fl_File_Chooser(dir_name,"*",0,"Open file");
    p->value(dir_name);
    strcpy(dir_name,(char*)p->directory());
  #ifdef __FL_MOL_VIEW__
    std::cout<<" p->directory: "<<(char*)p->directory()<<std::endl;
    std::cout<<" dir name: "<<dir_name<<std::endl;
    std::cout<<" p->value: "<<(char*)p->value()<<std::endl;
  #endif
}

void fl_xmol_view::open_file() {
  //
    ffmt=0;
    save_as_file_button->deactivate();
    //std::cout<<" dir name: "<<dir_name<<std::endl;
    Fl_File_Chooser * p;
    p = new Fl_File_Chooser(dir_name,"*",0,"Open file");
    p->directory(dir_name);
    //p->filter(filter1.c_str());
    p->show();
    while( p->visible()) Fl::wait();
    //
    if(p->value()){
      p_path_filename = (char*)p->value();
      p_dir  = (char*)p->directory();
      p_filename = fl_filename_name(p->value());
  #ifdef __FL_MOL_VIEW__
      std::cout<<" path_filename: "<<p_path_filename<<std::endl;
      std::cout<<" dir: "<<p_dir<<std::endl;
      std::cout<<" filename: "<<p_filename<<std::endl;
  #endif
      //
      mol3d->supercell.set_input_file(p_filename);
      ffmt = mol3d->get_view_file_type(p_filename);
      if(ffmt !=INPUT_FILE_TYPE_UNKNOWN ){
        //input_file_type->deactivate();
        input_file_type->value(ffmt);
        output_file_type->value(ffmt);
        if(ffmt==1){ // XYZ only
          input_file_units->activate();
        }else{
          input_file_units->deactivate();
        }
      }else{
        //choice_format->value(choice_format->size()-1);
        input_file_type->value(6);
        output_file_type->value(6);
        //input_file_type->activate();
        input_file_units->deactivate();
      }
      //mol3d->clear();
      //mol3d->set_dir(p_dir);
      //mol3d->topmol_dir(p_dir);
      //
      strcpy(dir_name,p_dir);
      strcpy(file_name,p_filename);
      //    
  #ifdef __FL_MOL_VIEW__
      std::cout<<"======================================================================"<<std::endl;
      std::cout<<" File Name = "<<p_filename<<std::endl;
      std::cout<<" Dir Name = "<<p_dir<<std::endl;
      std::cout<<"======================================================================"<<std::endl;
  #endif
      //fn->value(file_name);
      //filename_box->value(p_filename);
      // Name bar
      sprintf(title_bar, "XMV - %s", p_path_filename);
      main_window->label(title_bar);
      if(ffmt != INPUT_FILE_TYPE_UNKNOWN){
        load_file_button->activate();
        load_file_button->color((Fl_Color)5);
        load_file_button->redraw();
      }else{
        load_file_button->deactivate();
      }
      //fragment_button->deactivate();
      sprintf(str_cmd,"/home/%s/.xmolvis/string.def",p_user);
  #ifdef __FL_MOL_VIEW__
      printf("%s\n",str_cmd);
  #endif
      std::ofstream offile(str_cmd, std::ofstream::trunc | std::ofstream::out | std::ofstream::in);
      if (offile.is_open() && offile.good()){
        offile<<p_dir;
        offile.close();
      }
    }
}

void fl_xmol_view::open_file(const char *f,const char *d) {
  //
    ffmt=0;
    save_as_file_button->deactivate();
    //std::cout<<" dir name: "<<dir_name<<std::endl;
    Fl_File_Chooser * p;
    p = new Fl_File_Chooser(d,"*",0,"Open file");
    p->directory(d);
    //p->filter(filter1.c_str());
    //p->show();
    //while( p->visible()) Fl::wait();
    //
    p->value(f);
    if(p->value()){
      p_path_filename = (char*)p->value();
      p_dir  = (char*)p->directory();
      p_filename = fl_filename_name(p->value());
  #ifdef __FL_MOL_VIEW__
      std::cout<<" path_filename: "<<p_path_filename<<std::endl;
      std::cout<<" dir: "<<p_dir<<std::endl;
      std::cout<<" filename: "<<p_filename<<std::endl;
  #endif
      //
      mol3d->supercell.set_input_file(p_filename);
      ffmt = mol3d->get_view_file_type(p_filename);
      if(ffmt !=INPUT_FILE_TYPE_UNKNOWN ){
        //input_file_type->deactivate();
        input_file_type->value(ffmt);
        output_file_type->value(ffmt);
        if(ffmt==1){ // XYZ only
          input_file_units->activate();
        }else{
          input_file_units->deactivate();
        }
      }else{
        //choice_format->value(choice_format->size()-1);
        input_file_type->value(6);
        output_file_type->value(6);
        //input_file_type->activate();
        input_file_units->deactivate();
      }
      //mol3d->clear();
      //mol3d->set_dir(p_dir);
      //mol3d->topmol_dir(p_dir);
      //
      strcpy(dir_name,p_dir);
      strcpy(file_name,p_filename);
      //    
  #ifdef __FL_MOL_VIEW__
      std::cout<<"======================================================================"<<std::endl;
      std::cout<<" File Name = "<<p_filename<<std::endl;
      std::cout<<" Dir Name = "<<p_dir<<std::endl;
      std::cout<<"======================================================================"<<std::endl;
  #endif
      //fn->value(file_name);
      //filename_box->value(p_filename);
      // Name bar
      sprintf(title_bar, "XMV - %s", p_path_filename);
      main_window->label(title_bar);
      if(ffmt != INPUT_FILE_TYPE_UNKNOWN){
        load_file_button->activate();
        load_file_button->color((Fl_Color)5);
        load_file_button->redraw();
      }else{
        load_file_button->deactivate();
      }
      //fragment_button->deactivate();
      sprintf(str_cmd,"/home/%s/.xmolvis/string.def",p_user);
  #ifdef __FL_MOL_VIEW__
      printf("%s\n",str_cmd);
  #endif
      std::ofstream offile(str_cmd, std::ofstream::trunc | std::ofstream::out | std::ofstream::in);
      if (offile.is_open() && offile.good()){
        offile<<p_dir;
        offile.close();
      }
    }
}

void fl_xmol_view::initialise_select(const char *p, const char *d) {
  //
    ffmt=0;
    save_as_file_button->deactivate();
    
    //Fl_File_Chooser * p;
    //p = new Fl_File_Chooser(dir_name,"*",0,"Open file");
    //p->directory(dir_name);
    //p->filter(filter1.c_str());
    //p->show();
    //while( p->visible()) Fl::wait();
    //
    //if(p->value()){
      p_path_filename = (char*)p;
      p_dir  = (char*)d;
      p_filename = fl_filename_name((char*)p);
  #ifdef __FL_MOL_VIEW__
      std::cout<<" path_filename: "<<p_path_filename<<std::endl;
      std::cout<<" dir: "<<p_dir<<std::endl;
      std::cout<<" filename: "<<p_filename<<std::endl;
  #endif
      //
      mol3d->supercell.set_input_file(p_filename);
      ffmt = mol3d->get_view_file_type(p_filename);
      if(ffmt !=INPUT_FILE_TYPE_UNKNOWN ){
        //input_file_type->deactivate();
        input_file_type->value(ffmt);
        output_file_type->value(ffmt);
        if(ffmt==1){ // XYZ only
          input_file_units->activate();
        }else{
          input_file_units->deactivate();
        }
      }else{
        //choice_format->value(choice_format->size()-1);
        input_file_type->value(6);
        output_file_type->value(6);
        //input_file_type->activate();
        input_file_units->deactivate();
      }
      //mol3d->clear();
      //mol3d->set_dir(p_dir);
      //mol3d->topmol_dir(p_dir);
      //
      strcpy(dir_name,p_dir);
      strcpy(file_name,p_filename);
      //    
  #ifdef __FL_MOL_VIEW__
      std::cout<<"======================================================================"<<std::endl;
      std::cout<<" File Name = "<<p_filename<<std::endl;
      std::cout<<" Dir Name = "<<p_dir<<std::endl;
      std::cout<<"======================================================================"<<std::endl;
  #endif
      //fn->value(file_name);
      //filename_box->value(p_filename);
      // Name bar
      sprintf(title_bar, "XMV - %s", p_path_filename);
      main_window->label(title_bar);
      if(ffmt != INPUT_FILE_TYPE_UNKNOWN){
        load_file_button->activate();
        load_file_button->color((Fl_Color)5);
        load_file_button->redraw();
      }else{
        load_file_button->deactivate();
      }
      //fragment_button->deactivate();
      sprintf(str_cmd,"/home/%s/.xmolvis/string.def",p_user);
  #ifdef __FL_MOL_VIEW__
      printf("%s\n",str_cmd);
  #endif
      std::ofstream offile(str_cmd, std::ofstream::trunc | std::ofstream::out | std::ofstream::in);
      if (offile.is_open() && offile.good()){
        offile<<p_dir;
        offile.close();
      }
    //}
}

void fl_xmol_view::readDefault() {
  //
      //if(_vdef.read_file("/home/etorres/.posmap/iposmap.def",3)){
      	////cout<<_vdef;
      	//_tr_li->value(_vdef[0]);
      	//_tr_lf->value(_vdef[1]);
      	//_tr2d_lf->value(_vdef[2]);
      //}else
         //_vdef.resize(3);
         
      ///if(_rdef.read_file("/home/etorres/.posmap/fposmap.def",12)){
      	////cout<<_vdef;
      	//_tr_xi->value(_rdef[0]);
      	//_tr_yi->value(_rdef[1]);
      	//_tr_zi->value(_rdef[2]);
      	//_tr_xf->value(_rdef[3]);
      	//_tr_yf->value(_rdef[4]);
      	//_tr_zf->value(_rdef[5]);
      	//_tr2d_xf->value(_rdef[6]);
      	//_tr2d_yf->value(_rdef[7]);
      	//_tr2d_zf->value(_rdef[8]);
      	//_d_m_s_1->value(_rdef[9]);
      	//_d_m_s_2->value(_rdef[10]);
      	//_d_m_s_3->value(_rdef[11]);
      //}else
          //_rdef.resize(12);
}

void fl_xmol_view::readDefault(char* p) {
  //
    //char _str_name[1024];
    //sprintf(_str_name,"%s/iposmap.def",p);
    //if(_vdef.read_file(_str_name,3)){
      //cout<<_vdef;
      //_tr_li->value(_vdef[0]);
      //_tr_lf->value(_vdef[1]);
      //_tr2d_lf->value(_vdef[2]);
    //}else
      //_vdef.resize(3);
    
    //sprintf(_str_name,"%s/fposmap.def",p);     
    //if(_rdef.read_file(_str_name,12)){
      //cout<<_vdef;
      //_tr_xi->value(_rdef[0]);
      //_tr_yi->value(_rdef[1]);
      //_tr_zi->value(_rdef[2]);
      //_tr_xf->value(_rdef[3]);
      //_tr_yf->value(_rdef[4]);
      //_tr_zf->value(_rdef[5]);
      //_tr2d_xf->value(_rdef[6]);
      //_tr2d_yf->value(_rdef[7]);
      //_tr2d_zf->value(_rdef[8]);
      //_d_m_s_1->value(_rdef[9]);
      //_d_m_s_2->value(_rdef[10]);
      //_d_m_s_3->value(_rdef[11]);
    //}else
      //_rdef.resize(12);
}

void fl_xmol_view::load_file() {
  //
    //unsigned int fmt, _n;
    //unsigned int _n;
    bool res;
    //char _buff[3];
    TVector<real> _v;
    TMatrix<real> _m;
    
    mol3d->clear();
    mol3d->supercell.set_dir(p_dir);
    mol3d->supercell.set_topmol_directory(p_dir);
  
    if(ffmt == INPUT_FILE_TYPE_UNKNOWN){
      std::cout<<"!!! UNKNOWN FILE TYPE !!!"<<std::endl;
    }else{
      mol3d->supercell.set_input_file_type((unsigned int)input_file_type->value());
      mol3d->supercell.set_input_file_units((unsigned int)input_file_units->value());
  #ifdef __FL_MOL_VIEW__
      std::cout<<" VIEW: load structure"<<std::endl;
  #endif
      // setting up the visualization mode
      res = mol3d->initialize();                                                    //
      ///////////////////////////////////////////////////////////////
      if(res){
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: setting up the visualization"<<std::endl;
  #endif
        // this code will be moved to show the data in a new window
        //_m = mol3d->get_view_bounding_box();                                      //
        ///load_lattice_vectors(2*_m);                                              //
        //_n=  mol3d->get_view_total_fragments();
        //number_of_fragments->value(_n);
        //initialise_select();
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: visualization ready"<<std::endl;
  #endif
        ///////////////////////////////////////////////////////////////
        // Widget set up and information
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: Widget set up and information"<<std::endl;
        _v = mol3d->get_view_basis_direct();
        std::cout<<" VIEW: basis direct="<<_v<<std::endl;
  #endif
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: position bounds"<<std::endl;
  #endif
        //
        // fill up tables
        // this code will be moved to show the data in a new window
        //load_table_data_cartesian(mol3d->get_view_atomic_symbols(),mol3d->get_view_cartesian());
        //load_table_data_direct(mol3d->get_view_atomic_symbols(),mol3d->get_view_direct());
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: tables loaded"<<std::endl;
  #endif
        // allow to display the structure
        //mol3d->is_graphics(true);
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: graphic on"<<std::endl;
  #endif
        view_update_coordinates();
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: update coordinates"<<std::endl;
  #endif
        view_redraw();
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: structure displayed"<<std::endl;
  #endif
        save_as_file_button->activate();
        save_file_button->activate();
  #ifdef __FL_MOL_VIEW__
        std::cout<<" VIEW: structure loaded"<<std::endl;
  #endif
        // GUI reaction
        output_file_atoms->activate();
        output_file_frags->activate();
        save_as_file_button->activate();
        load_file_button->color((Fl_Color)25);
        load_file_button->redraw();
        //file_options->activate();
        //edit_frag->activate();
        //scan_pes->activate();
        //
        _v = mol3d->get_view_basis_direct();
        //u_position_slide->bounds(0,_v[0]);
        //v_position_slide->bounds(0,_v[1]);
        //w_position_slide->bounds(0,_v[2]);
        //output_file_atoms->value(1);
        //output_file_frags->value(1);
      //}else{
        //message_xmol * message = new message_xmol();
        //message->show();
      }
    }
}

void fl_xmol_view::save_as_file() {
  //
    uint ofmt=0, otyp, atm=0, frg=0, top=0;
    //
    otyp = (uint)output_file_type->value();
    Fl_File_Chooser *p = new Fl_File_Chooser(p_path_filename,"*",2,"Save file as");
    p->directory(dir_name);
    p->show();
    //
    while( p->visible())
      Fl::wait();
    //
    if(p->value()){
      p_path_filename = (char*)p->value();
      p_dir  = (char*)p->directory();
      p_filename = fl_filename_name(p->value());
      mol3d->supercell.set_dir(p_dir);
      mol3d->supercell.set_topmol_directory(p_dir);
      atm=(int)output_file_atoms->value();
      frg=(int)output_file_frags->value();
      top=(int)output_topology->value();
      if(atm==1 && frg==0){           // atoms but no fragments
        ofmt=OUTPUT_FORMAT_ATM_NFR;
      }else if(atm==1 && frg==1){     // atoms and fragments
        ofmt=OUTPUT_FORMAT_ATM_FRG;
      }else if(atm==0 && frg==1){     // no atoms but fragments
        ofmt=OUTPUT_FORMAT_NAT_FRG;
      }else if(atm==0 && frg==0){     // no atoms and no fragments
        ofmt=OUTPUT_FORMAT_NAT_NFR;
      }else{                          // standard format
        ofmt=OUTPUT_FORMAT_STD;
      }
      mol3d->supercell.set_output_file_format(ofmt);
      mol3d->supercell.set_output_file_type(otyp);
      mol3d->save_wysiwyg_as(p_dir,p_filename);
      if(top) mol3d->supercell.save_topmol_file(p_dir,p_filename);
      strcpy(dir_name,p_dir);
      strcpy(file_name,p_filename);
      //filename_box->value(p_filename);
      // Name bar
      //sprintf(title_bar, "MMB - %s", file_name);
      sprintf(title_bar, "XMV - %s", p_path_filename);
      main_window->label(title_bar);
    }
  #ifdef __FL_MOL_VIEW__
    std::cout<<"======================================================================"<<std::endl;
    std::cout<<" File Name = "<<p_filename<<std::endl;
    std::cout<<" Dir Name = "<<p_dir<<std::endl;
    std::cout<<" Format = "<<ofmt<<std::endl;
    std::cout<<"======================================================================"<<std::endl;
  #endif
  //  }
}

void fl_xmol_view::saveDefault() {
  //
  
     //saveDefault(0,(int)_tr_li->value());
     //saveDefault(1,(int)_tr_lf->value());
     //saveDefault(2,(int)_tr2d_lf->value());
     
     //saveValDefault(0,(real)_tr_xi->value());
     //saveValDefault(1,(real)_tr_yi->value());
     //saveValDefault(2,(real)_tr_zi->value());
     
     //saveValDefault(3,(real)_tr_xf->value());
     //saveValDefault(4,(real)_tr_yf->value());
     //saveValDefault(5,(real)_tr_zf->value());
     
     //saveValDefault(6,(real)_tr2d_xf->value());
     //saveValDefault(7,(real)_tr2d_yf->value());
     //saveValDefault(8,(real)_tr2d_zf->value());
     
     //saveValDefault(9,(real)_d_m_s_1->value());
     //saveValDefault(10,(real)_d_m_s_2->value());
     //saveValDefault(11,(real)_d_m_s_3->value());
}

void fl_xmol_view::saveDefault(char* p) {
  //
    //char _str_name[1024];
    //_vdef.save_file(p);
    //sprintf(_str_name,"%s/iposmap.def",p);
    //_vdef.save_file(_str_name);
    //sprintf(_str_name,"%s/fposmap.def",p);
    //_rdef.save_file(_str_name);
}

void fl_xmol_view::saveDefault(int _i, int _val) {
  //
      //_vdef[_i] = _val;
      //_vdef.save_file("/home/etorres/.posmap/iposmap.def");
}

void fl_xmol_view::saveValDefault(int _i, real _val) {
  //
      //_rdef[_i] = _val;
      //_rdef.save_file("/home/etorres/.posmap/fposmap.def");
}

void fl_xmol_view::view_update_coordinates(void) {
  //
    update_coordinates=true;
}

void fl_xmol_view::update_information(void) {
  //
      
      TVector<real> _v1;
      // Cartesian coordinate position
      _v1 = mol3d->get_position_cartesian();
      //cartesian_x_coordinate->value(_v1[0]);
      //cartesian_y_coordinate->value(_v1[1]);
      //cartesian_z_coordinate->value(_v1[2]);
      // Reduced direct coordinate position
      _v1 =  mol3d->get_position_direct();
      //direct_ru_coordinate->value(_v1[0]);
      //direct_rv_coordinate->value(_v1[1]);
      //direct_rw_coordinate->value(_v1[2]);
      // Direct coordinate position
      _v1 = mol3d->get_view_position_uvw();
      //direct_u_coordinate->value(_v1[0]);
      //direct_v_coordinate->value(_v1[1]);
      //direct_w_coordinate->value(_v1[2]);
      // set the slider positions
      //u_position_slide->value(_v1[0]);
      //v_position_slide->value(_v1[1]);
      //w_position_slide->value(_v1[2]);
      // Angles Rads
      _v1 = mol3d->get_view_axis_angles();
      //theta_angle_rad->value(_v1[0]);
      //psi_angle_rad->value(_v1[1]);
      //phi_angle_rad->value(_v1[2]);
      // Angles Degs
      _v1 = RAD_DEG*_v1;
      //theta_angle_deg->value(_v1[0]);
      //psi_angle_deg->value(_v1[1]);
      //phi_angle_deg->value(_v1[2]);
      // Dials
      //theta_angle_dial->value(_v1[0]);
      //psi_angle_dial->value(_v1[1]);
      //phi_angle_dial->value(_v1[2]); 
      //view_redraw();
}

void fl_xmol_view::view_redraw(void) {
  //
  
    mol3d->map_update_active_fragment();
    if(update_coordinates){
        //mol3d->update_atomic_coordinates(mol3d->get_view_cartesian());
        //mol3d->set_axis_position(mol3d->get_view_centered_position_cartesian());
        //mol3d->set_axis_precession(mol3d->get_view_axis_precession());
        //mol3d->set_axis_tilt(mol3d->get_view_axis_tilt());
        //mol3d->set_backbone_precession(mol3d->get_view_backbone_precession());
        //mol3d->set_backbone_tilt(mol3d->get_view_backbone_tilt());
        ////////////////////////////////////
        mol3d->set_update_coordinates(true);
        mol3d->update_data();
        //update_coordinates=false;
    }
  
    //
    Fl::wait(0.1);
    //_tab->activate();
    mol3d->redraw();
}

void fl_xmol_view::show() {
  //
    static char verbuff[16];
    sprintf(verbuff,"XMV %s",AutoVersion::UBUNTU_VERSION_STYLE);
    vernum->label((const char*) verbuff);
    main_window->show();
}

void fl_xmol_view::show_view() {
  //
    static char verbuff[16];
    sprintf(verbuff,"XMV %s",AutoVersion::UBUNTU_VERSION_STYLE);
    vernum->label((const char*) verbuff);
    main_window->show();
    //open_file(df);
    load_file();
}

void fl_xmol_view::resize(int x, int y, int w, int h) {
  //
    resize(x, y, w, h);
}
