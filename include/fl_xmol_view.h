// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef fl_xmol_view_h
#define fl_xmol_view_h
#include <FL/Fl.H>
#include <version.h>
#include <fl_gl_mol_view.h>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>

class help_xmol {
public:
  help_xmol();
  Fl_Double_Window *help_win;
private:
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Box *version;
  void show();
};

class message_xmol {
public:
  message_xmol();
  Fl_Double_Window *message_win;
private:
  inline void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  void show();
};
#include <FL/Fl_Group.H>
#include <FL/Fl_Menu_Bar.H>
#include<msmvtl/tmatrix.h>
#include<string.h>
#include<FL/Fl_File_Chooser.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Value_Input.H>

class fl_xmol_view {
public:
  TVector<int> _vdef; 
  TVector<real> _rdef; 
private:
  bool update_coordinates; 
  bool next_play; 
  char file_name[256]; 
  char dir_name[256]; 
  char title_bar[256]; 
  char str_cmd[1024]; 
public:
  const char * p_path_filename; 
  const char * p_filename; 
  const char * p_dir; 
  const char * p_user; 
  uint ffmt; 
  fl_xmol_view();
  Fl_Double_Window *main_window;
  Fl_Gl_Mol_View *mol3d;
private:
  inline void cb_mol3d_i(Fl_Gl_Mol_View*, void*);
  static void cb_mol3d(Fl_Gl_Mol_View*, void*);
public:
  Fl_Group *control_panel;
  Fl_Menu_Bar *main_menu;
  static Fl_Menu_Item menu_main_menu[];
private:
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  inline void cb_Close2_i(Fl_Menu_*, void*);
  static void cb_Close2(Fl_Menu_*, void*);
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  Fl_Group *file_tools;
  Fl_Button *vernum;
private:
  inline void cb_vernum_i(Fl_Button*, void*);
  static void cb_vernum(Fl_Button*, void*);
public:
  Fl_Button *file_open_button;
private:
  inline void cb_file_open_button_i(Fl_Button*, void*);
  static void cb_file_open_button(Fl_Button*, void*);
public:
  Fl_Button *load_file_button;
private:
  inline void cb_load_file_button_i(Fl_Button*, void*);
  static void cb_load_file_button(Fl_Button*, void*);
public:
  Fl_Button *save_as_file_button;
private:
  inline void cb_save_as_file_button_i(Fl_Button*, void*);
  static void cb_save_as_file_button(Fl_Button*, void*);
public:
  Fl_Button *reload_file_button;
private:
  inline void cb_reload_file_button_i(Fl_Button*, void*);
  static void cb_reload_file_button(Fl_Button*, void*);
public:
  Fl_Button *save_file_button;
private:
  inline void cb_save_file_button_i(Fl_Button*, void*);
  static void cb_save_file_button(Fl_Button*, void*);
public:
  Fl_Choice *output_program;
  Fl_Choice *input_file_type;
private:
  inline void cb_input_file_type_i(Fl_Choice*, void*);
  static void cb_input_file_type(Fl_Choice*, void*);
public:
  Fl_Choice *input_file_units;
private:
  inline void cb_input_file_units_i(Fl_Choice*, void*);
  static void cb_input_file_units(Fl_Choice*, void*);
public:
  Fl_Choice *output_file_type;
private:
  inline void cb_output_file_type_i(Fl_Choice*, void*);
  static void cb_output_file_type(Fl_Choice*, void*);
public:
  Fl_Check_Button *output_file_atoms;
private:
  inline void cb_output_file_atoms_i(Fl_Check_Button*, void*);
  static void cb_output_file_atoms(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *output_file_frags;
private:
  inline void cb_output_file_frags_i(Fl_Check_Button*, void*);
  static void cb_output_file_frags(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *output_topology;
private:
  inline void cb_output_topology_i(Fl_Check_Button*, void*);
  static void cb_output_topology(Fl_Check_Button*, void*);
public:
  Fl_Choice *sphere_resolution;
private:
  inline void cb_sphere_resolution_i(Fl_Choice*, void*);
  static void cb_sphere_resolution(Fl_Choice*, void*);
public:
  Fl_Value_Input *xcells;
private:
  inline void cb_xcells_i(Fl_Value_Input*, void*);
  static void cb_xcells(Fl_Value_Input*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Value_Input *ycells;
private:
  inline void cb_ycells_i(Fl_Value_Input*, void*);
  static void cb_ycells(Fl_Value_Input*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Value_Input *zcells;
private:
  inline void cb_zcells_i(Fl_Value_Input*, void*);
  static void cb_zcells(Fl_Value_Input*, void*);
  inline void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
  inline void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
public:
  void open_directory(const char *d);
  void open_file();
  void open_file(const char *f,const char *d);
  void initialise_select(const char *p, const char *d);
  void readDefault();
  void readDefault(char* p);
  void load_file();
  void save_as_file();
  void saveDefault();
  void saveDefault(char* p);
  void saveDefault(int _i, int _val);
  void saveValDefault(int _i, real _val);
  virtual void view_update_coordinates(void);
  void update_information(void);
  virtual void view_redraw(void);
  void show();
  void show_view();
  void resize(int x, int y, int w, int h);
};
#endif
